
-------------------------------------------------------------------------------------------------------------------------------
CI-CD Overview:
-------------------------------------------------------------------------------------------------------------------------------

Continuos Integration:
    Push the code to Code commit/ github etc.
    Once code pushed, build/test server process the code. 

Continuos Delivery/Deployment:
    Continuos delivery involves manual step. 
    Continuos deployment is fully automated. 

Code Repository:AWS Code Commit, Git Hub
Build & Test:   AWS Code Build , Jenkins, Bamboo 
Provision:      AWS Elastic Bean Stalk 
Deploy:         AWS Code Deploy (User managed EC2, On Prem, Lambda, ECS)
Orchestrate:    AWS Code Pipeline 

-------------------------------------------------------------------------------------------------------------------------------

Code Commit: 
    It is private fully managed AWS git repository. 
    It is like Git Hub, Bit bucket.
    Code is encrypted and store under the account. 

Code Commit - Create First Repository & HTTPS Configuration:
    It can be connected through HTTPS & SSH Connection.
    SSH is not enabled for root account. 
    Under IAM User -> security credentials -> SSH Keys or HTTPS Git credential for Code Commit. 
    These credentials are used for push or pull from repository. 

    Code Commit -> Create Repository -> (Repository Name) -> Done. 
    Code Commit -> Repository -> View Repository 
    Clone URL gives the repository URL which will copied. 

Code Commit - Clone, Add, Commit, Push:
    git status          -> Shows status whether tracked or untracked. 
    git add .           -> Add files to staging area. 
    git commit -m 'msg' -> Commit the change in local git. 
    git push            -> Push to the repository. During push, asks for username and password. 

Code Commit - Branches and Pull Requests:
    git checkout -b branch_Name     -> It creates new branch and switch to new branch. 
    git branch branch_Name          -> Create a new branch. 
    git checkout branch_Name        -> Switch to new branch. 

    1. Created the new branch and modified with new feature. 
    2. Create Pull request (Merge) -> Merge the new feature branch to master branch. 
    3. In create pull request, select source as 'new feature branch' and destination as 'master' branch. 
    4. If no merge conflicts, will allow to create pull request. 
    5. From pull request section, Reviewer click 'Merge' to accept pull request. (Here have default option to delete the new-feature branch if required)  

Code Commit - Securing the repository and Branches: 
    It can be done by creating the policy to explicit deny to secure master branch. 
    Available in : https://docs.aws.amazon.com/codecommit/latest/userguide/how-to-conditional-branch.html
    Note: In below policy given for main branch only, Need to add master branch. 

                {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Deny",
                        "Action": [
                            "codecommit:GitPush",
                            "codecommit:DeleteBranch",
                            "codecommit:PutFile",
                            "codecommit:MergeBranchesByFastForward",
                            "codecommit:MergeBranchesBySquash",
                            "codecommit:MergeBranchesByThreeWay",
                            "codecommit:MergePullRequestByFastForward",
                            "codecommit:MergePullRequestBySquash",
                            "codecommit:MergePullRequestByThreeWay"
                        ],
                        "Resource": "arn:aws:codecommit:us-east-1:*:*",
                        "Condition": {
                            "StringEqualsIfExists": {
                                "codecommit:References": [
                                    "refs/heads/main",
                                    "refs/heads/master"
                                ]
                            },
                            "Null": {
                                "codecommit:References": "false"
                            }
                        }
                    }
                ]
            }


    It failed with below error, so not allowing to push to master branch:

        error: remote unpack failed: internal error
        To https://git-codecommit.us-east-1.amazonaws.com/v1/repos/devops-code-commit-demo
        ! [remote rejected] master -> master (unpacker error)
        error: failed to push some refs to 'https://git-codecommit.us-east-1.amazonaws.com/v1/repos/devops-code-commit-demo'


    Code Commit - Triggers and Notifications:
        Notification - If any process like push, pull etc, it can be notified by using SNS. 
        Trigger - Same as notification but inaddition to SNS it allows to trigger Lambda. 
        Cloud watch Event - It can also done here by select source as code commit and target as any like SNS, Lambda etc. 

        Code Commit -> Settings -> Notifications Tab:
            Name, Events, SNS Target to select. 

        Code Commit -> Settings -> Trigger Tab: 
            Can select SNS or Lambda. 
        
        Event Bridge -> Rules -> Create Rule: 
            Name, Service Provider, Target 
    
    Code Commit - AWS Lambda: 
        https://docs.aws.amazon.com/codecommit/latest/userguide/how-to-notify-lambda.html
        
        1. Created the lambda function with trigger as code commit. 
        2. If any change in events in code commit, triggered the lambda. 
        3. Verified in cloud watch logs. 


-------------------------------------------------------------------------------------------------------------------------------

Code Build:
    It is fully managed build service like Jenkins. 
    Leverages Docker under the hood. 
    Source code from S3, Code Commit, Code Pipeline etc. 
    Build instruction defined in buildspec.yml file. 
    Output to S3 and cloud watch logs. 
    Can integrate with Event bridge to detect failures. 
    SNS & Lambda integrations. 

Code Build - First Build: 
    code build -> build projects -> 
    Sources - No sources/S3/Code Commit/Git hub/Bit bucket. 
    Reference Type can be Branch/Git tag/ Commit ID 
    Once build created, click 'start build' to run the build.                                                   


Code Build - buildspec.yml file: 
    It can be placed in S3 or root of source directory.


        version: 0.2                    # represent buildspec version. recommended to use 0.2 
        run-as: Linux-user-name         # optional specific to linux. 
        env:
        shell: shell-tag
        variables:
            key: "value"
            key: "value"
        parameter-store:
            key: "value"
            key: "value"
        exported-variables:
            - variable
            - variable
        secrets-manager:
            key: secret-id:json-key:version-stage:version-id
        git-credential-helper: no | yes

        proxy:
        upload-artifacts: no | yes
        logs: no | yes

        batch:
        fast-fail: false | true
        # build-list:
        # build-matrix:
        # build-graph:
                
        phases:
        install:
            run-as: Linux-user-name
            on-failure: ABORT | CONTINUE
            runtime-versions:
            runtime: version
            runtime: version
            commands:
            - command
            - command
            finally:                # this will be executed if previous is failed or success. 
            - command
            - command
        pre_build:
            run-as: Linux-user-name
            on-failure: ABORT | CONTINUE
            commands:
            - command
            - command
            finally:
            - command
            - command
        build:
            run-as: Linux-user-name
            on-failure: ABORT | CONTINUE
            commands:
            - command
            - command
            finally:
            - command
            - command
        post_build:
            run-as: Linux-user-name
            on-failure: ABORT | CONTINUE
            commands:
            - command
            - command
            finally:
            - command
            - command
        reports:
        report-group-name-or-arn:
            files:
            - location
            - location
            base-directory: location
            discard-paths: no | yes
            file-format: report-format
        artifacts:              
        files:
            - location
            - location
        name: artifact-name
        discard-paths: no | yes
        base-directory: location
        exclude-paths: excluded paths
        enable-symlinks: no | yes
        s3-prefix: prefix
        secondary-artifacts:
            artifactIdentifier:
            files:
                - location
                - location
            name: secondary-artifact-name
            discard-paths: no | yes
            base-directory: location
            artifactIdentifier:
            files:
                - location
                - location
            discard-paths: no | yes
            base-directory: location
        cache:
        paths:
            - path
            - path


Code Build - Docker, ECR & buildspec.yml file: 
    Code build used to build docker image and push to ECR. 
    
    1. Created the Dockerfile and buildspec.yml file. 
    2. Docker File: 
        FROM node:12-alpine
        RUN apk add --no-cache python3 g++ make
        WORKDIR /app
        COPY . .
        RUN yarn install --production
        CMD ["node", "src/index.js"]
    3. buildspec.yml: 
        version: 0.2
        phases:
        pre_build:
            commands:
            - echo Logging in to Amazon ECR...
            - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
        build:
            commands:
            - echo Build started on `date`
            - echo Building the Docker image...          
            - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
            - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG      
        post_build:
            commands:
            - echo Build completed on `date`
            - echo Pushing the Docker image...
            - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

    4. zip myzip.zip Dockerfile buildspec.yml 
    5. IMAGE_REPO_NAME=ECS Repository Name , IMAGE_TAG=latest version. 
    6. After build completed, ECR -> Repositories -> Images. 


Code Build - Environmental Variable and Parameter Store:
    https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
    Link has list of environmental variables can use. 
    printenv in buildspec.yml (under commands) file prints all environmental variables. 
    environment variables can be given in buildspec file or override in console. 
    Parameters can be place from Systems Manager Parameter Store or Secrets Manager. 

Code Build - Artifacts & S3: 
    1. Include the artifacts in buildspec.yaml file. 
    2. In code build console, update to include the artifacts by giving s3.  
    3. In code build, start the build. 
    4. Artifacts created in S3. 






