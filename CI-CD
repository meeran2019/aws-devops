
-------------------------------------------------------------------------------------------------------------------------------
CI-CD Overview:
-------------------------------------------------------------------------------------------------------------------------------

Continuos Integration:
    Push the code to Code commit/ github etc.
    Once code pushed, build/test server process the code. 

Continuos Delivery/Deployment:
    Continuos delivery involves manual step. 
    Continuos deployment is fully automated. 

Code Repository:AWS Code Commit, Git Hub
Build & Test:   AWS Code Build , Jenkins, Bamboo 
Provision:      AWS Elastic Bean Stalk 
Deploy:         AWS Code Deploy (User managed EC2, On Prem, Lambda, ECS)
Orchestrate:    AWS Code Pipeline 

-------------------------------------------------------------------------------------------------------------------------------

Code Commit: 
    It is private fully managed AWS git repository. 
    It is like Git Hub, Bit bucket.
    Code is encrypted and store under the account. 

Code Commit - Create First Repository & HTTPS Configuration:
    It can be connected through HTTPS & SSH Connection.
    SSH is not enabled for root account. 
    Under IAM User -> security credentials -> SSH Keys or HTTPS Git credential for Code Commit. 
    These credentials are used for push or pull from repository. 

    Code Commit -> Create Repository -> (Repository Name) -> Done. 
    Code Commit -> Repository -> View Repository 
    Clone URL gives the repository URL which will copied. 

Code Commit - Clone, Add, Commit, Push:
    git status          -> Shows status whether tracked or untracked. 
    git add .           -> Add files to staging area. 
    git commit -m 'msg' -> Commit the change in local git. 
    git push            -> Push to the repository. During push, asks for username and password. 

Code Commit - Branches and Pull Requests:
    git checkout -b branch_Name     -> It creates new branch and switch to new branch. 
    git branch branch_Name          -> Create a new branch. 
    git checkout branch_Name        -> Switch to new branch. 

    1. Created the new branch and modified with new feature. 
    2. Create Pull request (Merge) -> Merge the new feature branch to master branch. 
    3. In create pull request, select source as 'new feature branch' and destination as 'master' branch. 
    4. If no merge conflicts, will allow to create pull request. 
    5. From pull request section, Reviewer click 'Merge' to accept pull request. (Here have default option to delete the new-feature branch if required)  

Code Commit - Securing the repository and Branches: 
    It can be done by creating the policy to explicit deny to secure master branch. 
    Available in : https://docs.aws.amazon.com/codecommit/latest/userguide/how-to-conditional-branch.html
    Note: In below policy given for main branch only, Need to add master branch. 

                {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Deny",
                        "Action": [
                            "codecommit:GitPush",
                            "codecommit:DeleteBranch",
                            "codecommit:PutFile",
                            "codecommit:MergeBranchesByFastForward",
                            "codecommit:MergeBranchesBySquash",
                            "codecommit:MergeBranchesByThreeWay",
                            "codecommit:MergePullRequestByFastForward",
                            "codecommit:MergePullRequestBySquash",
                            "codecommit:MergePullRequestByThreeWay"
                        ],
                        "Resource": "arn:aws:codecommit:us-east-1:*:*",
                        "Condition": {
                            "StringEqualsIfExists": {
                                "codecommit:References": [
                                    "refs/heads/main",
                                    "refs/heads/master"
                                ]
                            },
                            "Null": {
                                "codecommit:References": "false"
                            }
                        }
                    }
                ]
            }


    It failed with below error, so not allowing to push to master branch:

        error: remote unpack failed: internal error
        To https://git-codecommit.us-east-1.amazonaws.com/v1/repos/devops-code-commit-demo
        ! [remote rejected] master -> master (unpacker error)
        error: failed to push some refs to 'https://git-codecommit.us-east-1.amazonaws.com/v1/repos/devops-code-commit-demo'


    Code Commit - Triggers and Notifications:
        Notification - If any process like push, pull etc, it can be notified by using SNS. 
        Trigger - Same as notification but inaddition to SNS it allows to trigger Lambda. 
        Cloud watch Event - It can also done here by select source as code commit and target as any like SNS, Lambda etc. 

        Code Commit -> Settings -> Notifications Tab:
            Name, Events, SNS Target to select. 

        Code Commit -> Settings -> Trigger Tab: 
            Can select SNS or Lambda. 
        
        Event Bridge -> Rules -> Create Rule: 
            Name, Service Provider, Target 
    
    Code Commit - AWS Lambda: 
        https://docs.aws.amazon.com/codecommit/latest/userguide/how-to-notify-lambda.html
        
        1. Created the lambda function with trigger as code commit. 
        2. If any change in events in code commit, triggered the lambda. 
        3. Verified in cloud watch logs. 


-------------------------------------------------------------------------------------------------------------------------------

Code Build:
    It is fully managed build service like Jenkins. 
    Leverages Docker under the hood. 
    Source code from S3, Code Commit, Code Pipeline etc. 
    Build instruction defined in buildspec.yml file. 
    Output to S3 and cloud watch logs. 
    Can integrate with Event bridge to detect failures. 
    SNS & Lambda integrations. 

Code Build - First Build: 
    code build -> build projects -> 
    Sources - No sources/S3/Code Commit/Git hub/Bit bucket. 
    Reference Type can be Branch/Git tag/ Commit ID 
    Once build created, click 'start build' to run the build.                                                   


Code Build - buildspec.yml file: 
    It can be placed in S3 or root of source directory.


        version: 0.2                    # represent buildspec version. recommended to use 0.2 
        run-as: Linux-user-name         # optional specific to linux. 
        env:
        shell: shell-tag
        variables:
            key: "value"
            key: "value"
        parameter-store:
            key: "value"
            key: "value"
        exported-variables:
            - variable
            - variable
        secrets-manager:
            key: secret-id:json-key:version-stage:version-id
        git-credential-helper: no | yes

        proxy:
        upload-artifacts: no | yes
        logs: no | yes

        batch:
        fast-fail: false | true
        # build-list:
        # build-matrix:
        # build-graph:
                
        phases:
        install:
            run-as: Linux-user-name
            on-failure: ABORT | CONTINUE
            runtime-versions:
            runtime: version
            runtime: version
            commands:
            - command
            - command
            finally:                # this will be executed if previous is failed or success. 
            - command
            - command
        pre_build:
            run-as: Linux-user-name
            on-failure: ABORT | CONTINUE
            commands:
            - command
            - command
            finally:
            - command
            - command
        build:
            run-as: Linux-user-name
            on-failure: ABORT | CONTINUE
            commands:
            - command
            - command
            finally:
            - command
            - command
        post_build:
            run-as: Linux-user-name
            on-failure: ABORT | CONTINUE
            commands:
            - command
            - command
            finally:
            - command
            - command
        reports:
        report-group-name-or-arn:
            files:
            - location
            - location
            base-directory: location
            discard-paths: no | yes
            file-format: report-format
        artifacts:              
        files:
            - location
            - location
        name: artifact-name
        discard-paths: no | yes
        base-directory: location
        exclude-paths: excluded paths
        enable-symlinks: no | yes
        s3-prefix: prefix
        secondary-artifacts:
            artifactIdentifier:
            files:
                - location
                - location
            name: secondary-artifact-name
            discard-paths: no | yes
            base-directory: location
            artifactIdentifier:
            files:
                - location
                - location
            discard-paths: no | yes
            base-directory: location
        cache:
        paths:
            - path
            - path


Code Build - Docker, ECR & buildspec.yml file: 
    Code build used to build docker image and push to ECR. 
    
    1. Created the Dockerfile and buildspec.yml file. 
    2. Docker File: 
        FROM node:12-alpine
        RUN apk add --no-cache python3 g++ make
        WORKDIR /app
        COPY . .
        RUN yarn install --production
        CMD ["node", "src/index.js"]
    3. buildspec.yml: 
        version: 0.2
        phases:
        pre_build:
            commands:
            - echo Logging in to Amazon ECR...
            - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
        build:
            commands:
            - echo Build started on `date`
            - echo Building the Docker image...          
            - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
            - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG      
        post_build:
            commands:
            - echo Build completed on `date`
            - echo Pushing the Docker image...
            - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

    4. zip myzip.zip Dockerfile buildspec.yml 
    5. Use the environemental variables IMAGE_REPO_NAME=ECS Repository Name , IMAGE_TAG=latest version. 
    6. After build completed, ECR -> Repositories -> Images. 


Code Build - Environmental Variable and Parameter Store:
    https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
    Link has list of environmental variables can use. 
    printenv in buildspec.yml (under commands) file prints all environmental variables. 
    environment variables can be given in buildspec file or override in console. 
    Parameters can be place from Systems Manager Parameter Store or Secrets Manager. 

Code Build - Artifacts & S3: 
    1. Include the artifacts in buildspec.yaml file. 
    2. In code build console, update to include the artifacts by giving s3.  
    3. In code build, start the build. 
    4. Artifacts created in S3. 

Code Build - Cloud watch Events, Cloudwatch Logs, Cloud watch metrics & Triggers:
    Code build -> View Projects -> edit -> Logs: 
        can select the cloudwatch logs and also s3 bucket to store logs. 
    
    Cloud watch -> Metrics -> Code build -> Select by Project or Account level. 
    Metrics can export to dashboard. 

    Cloud watch -> Events -> Rules: (Now changed to Amazon event bridge): 
        Event bridge -> Name, Event Pattern or Schedule (use cron to run at specific time) -> create Rule. 
    
Code Build - Validating code commit Pull Requests: 
    https://aws.amazon.com/blogs/devops/validating-aws-codecommit-pull-requests-with-aws-codebuild-and-aws-lambda/


-------------------------------------------------------------------------------------------------------------------------------

Code Deploy:
    EC2 or On-prem machine must running code deploy agent. 
    Agent continuosly polls code deploy for work. 
    code deploy has appspec.yml file. 
    Application is pulled from s3 or git hub. 
    Ec2 instances are group by deployment group. 
    It can integrate with pipeline. 
    Blue-Green works only with EC2 (not on-prem) 
    It support for Lambda, EC2. 

    Code + appspec.yml to S3 <->(Pulled by agent) EC2+agent. So EC2 requires access to read from S3. 

Code Deploy - EC2 Setup: 
    1. Create EC2 instance with TAGS mandatory. Tags are used by deployment group in code deploy service. 
    2. Create a service role with S3 access which requires to pull code_appspec.yml file from S3. 
    3. Install the code deploy agent in EC2. Either after ssh or use in user data field. 
            sudo yum update -y
            sudo yum install -y ruby wget
            wget https://aws-codedeploy-eu-west-1.s3.eu-west-1.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            sudo service codedeploy-agent status

Code Deploy - Application, Deployment Groups & FIrst Deployment: 
    1. Created the role (Allow code deploy to access EC2).
    2. Created the application. 
    3. Create the deployment group: 
            Name, Deployment type (Inplace or Blue green), Deployment Settings (Allatonce, oneatatime, halfatatime)
    4. Upload the code + appspecfile in zip to S3. 
            aws deploy push --application-name CodeDeployDemo --s3-location s3://aws-devops-course-stephane/codedeploy-demo/app.zip --ignore-hidden-files --region eu-west-1 --profile aws-devops            
    5. Create deployment: 
            s3 bucket location which contain code and then create deployment. 

    Note: TO check whether code deploy agent is properly installed. If not installed, then deploy will timeout with error. 

Code Deploy - Deployment Groups: 
    Under application, can create multiple deployment group with different tags. 
    This helps to separate for dev, prod instances. 
    During deploy, can select the specific deployment group for deployment. 

Code Deploy - Deployment Group Configurations: 
    Deployment Type: 
        Inplace - In existing instances, update the applications. 
        Blue Green  - Create new instances through manually or AutoScaling options. 
    
    Deployment Configurations: 
        AllatOnce, OneataTime, HalfataTime, Manually create deployment configurations. 
    
    Loadbalancer: 
        For blue-green, it is mandatory. 
        For inplace, it is optional. 

Code Deploy - appspec.yml file: 

    https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file.html

    NOte: Since run as root, no need of sudo in scripts. 

    version: 0.0
    os: linux
    files:
    - source: /
        destination: /var/www/html/WordPress
    hooks:
    BeforeInstall:
        - location: scripts/install_dependencies.sh
        timeout: 300
        runas: root
    AfterInstall:
        - location: scripts/change_permissions.sh
        timeout: 300
        runas: root
    ApplicationStart:
        - location: scripts/start_server.sh
        - location: scripts/create_test_db.shhttps://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html

    Hooks availabel different for , Inplace, Blue green original & replacement, Lambda  & ECS. 
    Few environmental variables are available like APPLICATION_NAME, DEPLOYMENT_ID
    
    if [ "$DEPLOYMENT_GROUP_NAME" == "Staging" ]
    then
        sed -i -e 's/Listen 80/Listen 9090/g' /etc/httpd/conf/httpd.conf
    fi
        timeout: 300
        runas: root
    ApplicationStop:
        - location: scripts/stop_server.sh
        timeout: 300
        runas: root
        

Code Deploy - Hooks & Environmental Variables: 
    https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html

    Hooks availabel different for , Inplace, Blue green original & replacement, Lambda  & ECS. 
    Few environmental variables are available like APPLICATION_NAME, DEPLOYMENT_ID, DEPLOYMENT_GROUP_NAME, DEPLOYMENT_GROUP_ID, LIFECYCLE_EVENT 
    
    if [ "$DEPLOYMENT_GROUP_NAME" == "Staging" ]
    then
        sed -i -e 's/Listen 80/Listen 9090/g' /etc/httpd/conf/httpd.conf
    fi


Code Deploy - Cloud watch, Alarm, Trigger:
    Code Deploy -> Deployment groups -> Advanced Option -> Trigger 
    Code Deploy -> Deployment groups -> Advanced Option -> Alarm 
    Event bridge -> Code build -> Target can be any. 

Code Deploy - Rollbacks: 
    Code Deploy -> Deployment groups -> Advanced Option -> Rollbacks. 
    1. Rollback when deployment fails. 
    2. Rollback when alarm threshold are met. (This can use to monitor cpu utiliation, if more than to rollback)

Code Deploy - On Premise Setup: 
    https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-on-premises.html

    Step 1 – Configure each on-premises instance, register it with CodeDeploy, and then TAG it.
    Step 2 – Deploy application revisions to the on-premises instance.

    1. use IAM User ARN  for authenticate request. -> Best for smaller instances. 
    2. use IAM role ARN for authenticate request. -> This is secure and complex. 

Code Deploy - Deploy to Lambda: 
    https://docs.aws.amazon.com/codedeploy/latest/userguide/applications-create-lambda.html

    hooks: 
        beforeallowtraffic functionname
        afterallowtraffic functionname 
    
    1. Create a service role for code-deploy for lambda. 
    2. Create the application. 
    3. Creaet the deployment group. 
    4. Deployment type: 
            allataonce
            canary - shifts in two increment 
            linear - shifts in equal increment. 
    5. Hooks contains beforeallowtraffic & afterallowtraffic. 


-------------------------------------------------------------------------------------------------------------------------------


    









